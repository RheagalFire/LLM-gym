name: Build, Push Docker Image to ECR, and Update ECS Task Definition

on:
  workflow_dispatch:
    inputs:
      service:
        type: choice
        description: 'Select the service to build Docker image from'
        options:
          - search-ui
          - gym_reader
        required: true

env:
  AWS_REGION: us-east-1  # Change to your AWS region
  ECR_ACCOUNT_ID: ${{ secrets.ECR_ACCOUNT_ID }}  # Your AWS account ID

jobs:
  build_push_update:
    permissions:
      contents: read
      packages: write
      id-token: write

    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Get version
        id: version
        run: echo "VERSION=$(date +'%Y.%m.%d-%H%M%S')" >> $GITHUB_ENV

      - name: Set image tag name
        id: set_image_tag
        run: |
          SERVICE_NAME=${{ github.event.inputs.service }}
          IMAGE_TAG=${{ env.ECR_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${SERVICE_NAME}:${{ env.VERSION }}
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          push: true
          tags: ${{ env.IMAGE_TAG }}
          context: ./
          file: ${{ github.event.inputs.service }}/Dockerfile

      - name: Render new ECS task definition
        id: render_task_definition
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ecs-task-definitions/${{ github.event.inputs.service }}-task-def.json
          container-name: ${{ github.event.inputs.service }}
          image: ${{ env.IMAGE_TAG }}

      - name: Determine service name
        id: determine_service
        run: |
          if [ "${{ github.event.inputs.service }}" == "llm-gym" ]; then
            echo "service=fastapi-app-service" >> $GITHUB_ENV
          elif [ "${{ github.event.inputs.service }}" == "search-ui" ]; then
            echo "service=search-ui-service" >> $GITHUB_ENV
          else
            echo "service=${{ github.event.inputs.service }}-service" >> $GITHUB_ENV

      - name: Deploy ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.render_task_definition.outputs.task-definition }}
          service: ${{ env.service }}
          cluster: main-cluster
          wait-for-service-stability: true